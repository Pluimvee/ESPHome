# Copyright (c) 2025 Pluimvee
# Aqua Heatpump configuration 

# First some basic configuration
#--------------------------------------------
esphome:
  name: "aqua-heatpump"
  friendly_name: Warmtepomp boiler

esp8266:
  board: esp8285

# Enable Home Assistant API
# LOCATED BELOW AS WE DEFINED SOME SERVICES

# Allow Over-The-Air updates
ota:
  - platform: esphome
    password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
# Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Test"
    password: !secret wifi_ap_password

captive_portal:

# Enable web server for debugging and control
web_server:
    port: 80
    version: 3

# Enable logging
logger:
  level: INFO  
  # baud_rate: 0  # Disable logging on UART (as we need the UART)

# NOW the device specific logic begins
#--------------------------------------------    
one_wire:
  - platform: gpio
    pin: GPIO013

# I²C bus (AHT10)
i2c:
  sda: GPIO4  # D2
  scl: GPIO5  # D1
  scan: true

# Reading the sensors each 10seconds
sensor:
  - platform: aht10
    temperature:
      name: "Air In"
      id: air_in_temp
      icon: "mdi:home-thermometer-outline"
    humidity:
      name: "Air Humidity"
      id: air_humidity
      icon: "mdi:water-percent"
    update_interval: 10s

  - platform: dallas_temp
    address: 0xe5858dc935646128
    id: boiler_temp
    icon: "mdi:gas-burner"
    name: "Boiler"
    update_interval: 5s
  - platform: dallas_temp
    address: 0x87b7b1c935646128  
    id: air_out_temp
    name: "Air Out"
    icon: "mdi:snowflake-thermometer"
    update_interval: 5s
  - platform: dallas_temp
    address: 0x6a0000000cbd5528  
    id: water_mixed_temp
    name: "Water Mixed"
    icon: "mdi:water-sync"
    update_interval: 5s
  - platform: dallas_temp
    address: 0x8e0000000d134d28  
    id: water_out_temp
    icon: "mdi:water-thermometer-outline"
    name: "Water Out"
    update_interval: 5s
  - platform: dallas_temp
    address: 0x960000000aa6db28  
    id: water_in_temp
    icon: "mdi:water-thermometer"
    name: "Water In"
    update_interval: 5s
    
  # Add a sensor to monitor WiFi signal strength
  - platform: wifi_signal
    name: "WiFi Signal Strength"
    update_interval: 60s
    icon: "mdi:wifi"

# GPIO outputs
switch:
  # The Solar mode (PV) which lets the WPB to run longer
  - platform: gpio
    pin: GPIO14  # D5
    id: solar_switch
    name: "Solar Mode"
    icon: "mdi:solar-power"
    restore_mode: ALWAYS_OFF
    inverted: false  # Active HIGH using Optocoupler
    on_turn_on:
      - script.execute: solar_heating_auto_off
    on_turn_off:
      - script.stop: solar_heating_auto_off

  # The internal heating element
  - platform: gpio
    pin: GPIO12  # D6
    name: "Booster Mode"
    inverted: false  # Active HIGH using Optocoupler
    id: boost_switch
    icon: "mdi:heating-coil"
    restore_mode: ALWAYS_OFF
    on_turn_on:
      - script.execute: booster_heating_auto_off
    on_turn_off:
      - script.stop: booster_heating_auto_off

  # vent medium switch
  # can be manually adjusted, but will turn back to automated state after 15 minutes
  - platform: gpio
    pin: GPIO16  # D0
    id: vent_medium
    name: "Vent Medium"
    icon: "mdi:fan-speed-2"
    restore_mode: RESTORE_DEFAULT_ON
    inverted: true  # Active LOW using Solid State Relais
    on_turn_on:
      - lambda: 'id(stable_timer) = millis();'
    on_turn_off:
      - lambda: 'id(stable_timer) = millis();'

  # vent medium high switch
  # can be manually adjusted, but will turn back to automated state after 15 minutes
  - platform: gpio
    pin: GPIO2  # D4
    id: vent_high
    name: "Vent High"
    icon: "mdi:fan-speed-3"
    restore_mode: RESTORE_DEFAULT_OFF
    inverted: true  # Active LOW using Solid State Relais
    on_turn_on:
      - lambda: 'id(stable_timer) = millis();'
    on_turn_off:
      - lambda: 'id(stable_timer) = millis();'

#Some binanry sensors
binary_sensor:
  - platform: template
    name: "Water Hot"
    device_class: heat
    icon: "mdi:water-alert"
    lambda: |-
      return id(water_hot);
  - platform: template
    name: "Air Humid"
    icon: "mdi:water-percent-alert"
    device_class: moisture
    lambda: |-
      return id(air_humid);
  - platform: template
    name: "Air Cold"
    icon: "mdi:snowflake-alert"
    device_class: cold
    lambda: |-
      return id(air_cold);

# Automations
globals:
  - id: base_humidity
    type: float
    restore_value: no
    initial_value: '0.0'
  - id: water_hot
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: air_cold
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: air_humid 
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: stable_timer
    type: uint32_t
    restore_value: no
    initial_value: '0'

# Automations
interval:
  # SAFETY: When the boiler temperature is above 80°C, turn off the boost switch
  - interval: 1min
    then:
      - if:
          condition:
            lambda: 'return id(boiler_temp).state > 80.0;'
          then:
            - switch.turn_off: boost_switch
            - logger.log:
                format: "Boiler temperature reached %.1f°C. Turning off boost."
                args:
                  - id(boiler_temp).state
                level: WARN

  # The vent can be set manually, after 15 minutes it will turn back into automated state
  # It will also turn into automated state when an event happens in the following
  # We detect 
  # - hot water (water usage) if water mixed temperature is higher than air in temperature by 5 degrees
  # - air cold (heat pump running) if air in temperature is higher than air out temperature by 1 degree
  # - air humid (moisture) if air humidity is higher than base humidity by 5%
  # The automated state is the following
  # - Ventilation High: When hot water is consumed
  # - Ventilation Medium: When moisture detected or heatpump is running
  # - default Ventilation: When nothing is detected
  - interval: 2s
    then:
      - lambda: |-
          if (id(base_humidity) == 0.0  && !isnan(id(air_humidity).state)){
            id(base_humidity) = id(air_humidity).state;
            ESP_LOGI("humidity", "Base humidity initialized to %.2f%%", id(base_humidity));
          }                         
          // Nieuwe vlagwaarden
          bool new_hot = (id(water_mixed_temp).state > id(air_in_temp).state + 5.0);  // als mixed water 5 graden warmer dan lucht temperature
          bool new_cold = (id(air_in_temp).state) > id(air_out_temp).state + 1.0;      // als lucht uit temperatuur 1 of meer graad lager is dan lucht in temperatuur
          bool new_hum = (id(air_humidity).state > id(base_humidity) + 5.0);          // als luchtvochtigheid 5% hoger is dan basisvochtigheid

          // Detecteer veranderingen
          bool changed = (new_hot != id(water_hot)) ||
                         (new_cold != id(air_cold)) ||
                         (new_hum != id(air_humid));

          // Zet flags
          id(water_hot) = new_hot;
          id(air_cold) = new_cold;
          id(air_humid) = new_hum;

          uint32_t elapsed = (millis() - id(stable_timer)) / 60000;  // in minuten

          // Base_humidity bijwerken als al 15 minuten niks gebeurd is, en dan iedere 15 minuten
          if (elapsed > 15 && !id(water_hot) && !id(air_humid)) {
            id(base_humidity) = id(air_humidity).state;
            ESP_LOGI("humidity", "Base humidity set to %.2f%%", id(base_humidity));
          }
          // Ventilatie aansturen als iets veranderd is of elke 15 minuten
          if (changed || elapsed > 15) {
            if (id(water_hot)) {
              id(vent_high).turn_on();
              id(vent_medium).turn_off();
              ESP_LOGI("vent", "Vent High ON (hot water)");
            } else if (id(air_humid) || id(air_cold)) {
              id(vent_high).turn_off();
              id(vent_medium).turn_on();
              ESP_LOGI("vent", "Vent Medium ON (humid or wpb)");
            } else {
              id(vent_high).turn_off();
              id(vent_medium).turn_off();
              ESP_LOGI("vent", "All ventilation OFF");
            }
            ESP_LOGI("status", "Base humidity: %0.2f, Water Hot: %s, Air Cold: %s, Air Humid: %s",
                    id(base_humidity),
                    id(water_hot) ? "Yes" : "No",
                    id(air_cold) ? "Yes" : "No",
                    id(air_humid) ? "Yes" : "No");
            
            // reset timer when change occured or when 15 minutes passed
            id(stable_timer) = millis();
          }

# Some scripts
script:
  # This script is triggered by the switch or service to turn off boosting automaticly
  # it will only turn off if the boiler temperature is below 80 degrees
  - id: booster_heating_auto_off
    mode: restart
    then:
      - if:
          condition:
            lambda: 'return id(boiler_temp).state < 80.0;'
          then:      
            - logger.log:
                level: INFO
                format: "Booster heating timer started"
            - delay: 15min  # Set your desired boost duration
            - switch.turn_off: boost_switch
            - logger.log:
                level: INFO 
                format: "Booster heating auto off"
          else:
          - logger.log:
              level: WARN
              format: "Booster heating blocked (%.1f°C)"
              args: [ id(boiler_temp).state ]
          - switch.turn_off: boost_switch

  # This script is triggered by the switch or service to turn off solar_heating automaticly
  - id: solar_heating_auto_off
    mode: restart
    then:
      - logger.log:
          level: INFO 
          format: "Solar heating timer started"
      - delay: 15min  # Set your desired eco-mode duration
      - switch.turn_off: solar_switch
      - logger.log:
          level: INFO 
          format: "Solar heating auto off"
  
# Expose some services
api:
  encryption:
    key: !secret api_key
  services:
    # boost mode
    - service: boost_heating
      then:
        - logger.log: "Boost heating service called"
        - switch.turn_on: boost_switch              # when boost_switch already on it will not trigger on_turn_on event
        - script.execute: booster_heating_auto_off  # so we need to execute the auto_turn_off script to restart the timer
    
    # solar heating mode
    - service: solar_heating
      then:
        - logger.log: "Solar heating service called"
        - switch.turn_on: solar_switch
        - script.execute: solar_heating_auto_off # same here, we need to restart the timer
