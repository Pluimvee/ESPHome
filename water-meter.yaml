# Copyright (c) 2025 Pluimvee
# Water meter ESPHome configuration 

# First some basic configuration
#--------------------------------------------
esphome:
  name: water-meter
  friendly_name: Water Meter
  on_boot:
    priority: -100  # Zorgt dat dit als laatste gebeurt (na WiFi, tijd, etc.)
    then:
      - lambda: |-
          id(water_used_total) = id(water_used_total_persisted);  // Restore from persistent storage

esp8266:
  board: esp01_1m

# Enable logging
logger:
  level: INFO
  baud_rate: 0

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_key

# Allow Over-The-Air updates
ota:
  - platform: esphome
    password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

# Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Watermeter Fallback Hotspot"
    password: !secret wifi_ap_password

captive_portal:

# Enable web server for debugging and control
web_server:
    port: 80
    version: 3

# and now we are adding the functionality of this device
#--------------------------------------------
# -- SNTP Time Setup --
time:
  - platform: sntp
    id: sntp_time
    timezone: Europe/Amsterdam  # CET/CEST (handles DST automatically)

# -- Persistent globals --
globals:
  - id: water_used_total_persisted
    type: float
    restore_value: yes
    initial_value: '2943.4736'

  - id: water_used_total
    type: float
    restore_value: no # Do not persist flash read/writes is limited (100k)
    initial_value: '0.0'

  - id: water_used_today
    type: float
    restore_value: no # Do not persist flash read/writes is limited (100k)
    initial_value: '0.0'

  - id: prev_liters
    type: float
    initial_value: '0'

script:
  - id: delayed_save # anti-wear script
    mode: restart
    then:
      - delay: 30s
      - lambda: |-
          // Save the current water_used_total to persistent storage
          id(water_used_total_persisted) = id(water_used_total);
          ESP_LOGI("delayed_save", "The total water used (%0.4f) persisted!", id(water_used_total_persisted));

sensor:
  # Add a sensor to monitor WiFi signal strength
  - platform: wifi_signal
    name: "WiFi Signal Strength"
    update_interval: 60s
    icon: "mdi:wifi"

  # -- Water meter sensors --
  - platform: template
    name: "Total"
    id: total
    unit_of_measurement: "m³"
    state_class: total_increasing # Use total_increasing to only accept increasing values
    device_class: water
    icon: "mdi:water-plus"
    accuracy_decimals: 4
    lambda: |-
      return id(water_used_total);

  - platform: template
    name: "Today"
    id: today
    unit_of_measurement: "L"
    state_class: total_increasing
    device_class: water
    icon: "mdi:cup-water"
    accuracy_decimals: 2
    lambda: |-
      return id(water_used_today);

  - platform: template
    name: "Flow"
    id: flow
    unit_of_measurement: "L/min"
    state_class: measurement
    device_class: water
    accuracy_decimals: 2
    icon: "mdi:water-pump"
    update_interval: 5s
    lambda: |-
      float delta = 0;
      if (id(prev_liters) >0 && id(water_used_today) > id(prev_liters))
        delta = id(water_used_today) - id(prev_liters);
      id(prev_liters) = id(water_used_today);
      return delta * 12;  // Convert to L/min (5s interval, so multiply by 12)

# -- Water meter edge detection --
binary_sensor:
  - platform: gpio
    pin: GPIO05
    name: "Detector"
    id: detector
    icon: mdi:format-rotate-90
    filters:
      - delayed_on: 200ms
      - delayed_off: 200ms
    on_press:
      - lambda: |-
          id(water_used_total) += 0.33 / 1000.0;   // 0.33 L, convert to m³
          id(water_used_today) += 0.33;
          id(total).publish_state(id(water_used_total));
          id(today).publish_state(id(water_used_today));
      - script.execute: delayed_save
    on_release:
      - lambda: |-
          id(water_used_total) += 0.67 / 1000.0;   // 0.67 L, convert to m³
          id(water_used_today) += 0.67;
          id(total).publish_state(id(water_used_total));
          id(today).publish_state(id(water_used_today));
      - script.execute: delayed_save

# -- Midnight reset for "Water Used Today" --
interval:
  - interval: 60s
    then:
      - lambda: |-
          static int last_day = -1;
          auto time = id(sntp_time).now();
          if (time.is_valid()) {
            // initialize last_day after boot
            if (last_day == -1) {
              last_day = time.day_of_year;
            }
            // Reset water_used_today at midnight
            if (time.day_of_year != last_day) {
              last_day = time.day_of_year;
              id(water_used_today) = 0;
              id(today).publish_state(id(water_used_today));
            }
          }
